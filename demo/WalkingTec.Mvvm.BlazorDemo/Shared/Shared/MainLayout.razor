@inherits LayoutComponentBase
@using System.Reflection
@inject WtmBlazorContext wtmblazor
<CascadingValue Value="this" IsFixed="true">

    <Layout SideWidth="0" IsPage="true" ShowGotoTop="true" ShowCollapseBar="true"
            IsFullSide="@IsFullSide" IsFixedHeader="@IsFixedHeader" IsFixedFooter="@IsFixedFooter" ShowFooter="@ShowFooter"
            Menus="@GetIconSideMenuItems()" UseTabSet="@UseTabSet" AdditionalAssemblies="new[] { GetType().Assembly }" class="@Theme">
        <Header>
            <span class="ml-3 flex-sm-fill d-none d-sm-block">Bootstrap of Blazor</span>
            <DropdownWidget></DropdownWidget>
            @*<img src="_content/BootstrapBlazorApp.Shared/images/Argo.png" class="layout-avatar-right" />*@
            <span class="mx-3 d-none d-sm-block">超级管理员</span>
            <div class="layout-drawer" @onclick="@(e => IsOpen = !IsOpen)"><i class="fa fa-gears"></i></div>
        </Header>
        <Side>
            <div class="layout-banner">
                @*<img class="layout-logo" src="_content/BootstrapBlazorApp.Shared/images/brand.png" />*@
                <div class="layout-title">
                    <span>后台管理</span>
                </div>
            </div>
            <div class="layout-user">
                @*<img class="layout-avatar" src="_content/BootstrapBlazorApp.Shared/images/Argo-C.png">*@
                <div class="layout-title">
                    <span>管理员</span>
                </div>
                <div class="layout-user-state"></div>
            </div>
        </Side>
        <Main>
            <CascadingValue Value="UserInfo">
                @Body
            </CascadingValue>
        </Main>
        <Footer>
            <div class="text-center flex-fill">
            </div>
        </Footer>
    </Layout>

    <Drawer Placement="Placement.Right" @bind-IsOpen="@IsOpen" IsBackdrop="true">
        <div class="layout-drawer-body">
            <div class="btn btn-info w-100" @onclick="@(e => IsOpen = false)">点击关闭</div>
            <GroupBox Title="布局调整">
                <div class="row">
                    <div class="col-6">
                        <div class="layout-item @(IsFullSide ? "active d-flex" : "d-flex")" @onclick="@(e => IsFullSide = true)" data-toggle="tooltip" title="左右结构">
                            <div class="layout-left d-flex flex-column">
                                <div class="layout-left-header"></div>
                                <div class="layout-left-body flex-fill"></div>
                            </div>
                            <div class="layout-right d-flex flex-column flex-fill">
                                <div class="layout-right-header"></div>
                                <div class="layout-right-body flex-fill"></div>
                                <div class="layout-right-footer"></div>
                            </div>
                        </div>
                    </div>
                    <div class="col-6">
                        <div class="layout-item flex-column @(IsFullSide ? "d-flex" : "active d-flex")" @onclick="@(e => IsFullSide = false)" data-toggle="tooltip" title="上下结构">
                            <div class="layout-top">
                            </div>
                            <div class="layout-body d-flex flex-fill">
                                <div class="layout-left">
                                </div>
                                <div class="layout-right flex-fill">
                                </div>
                            </div>
                            <div class="layout-footer">
                            </div>
                        </div>
                    </div>
                </div>

            </GroupBox>

            <GroupBox Title="固定调整">
                <div class="row">
                    <div class="col-6 d-flex align-items-center">
                        <Switch @bind-Value="@IsFixedHeader" OnColor="@Color.Success" OffColor="@Color.Secondary"></Switch>
                    </div>
                    <div class="col-6 text-right">
                        <span>固定页头</span>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-6 d-flex align-items-center">
                        <Switch @bind-Value="@IsFixedFooter" OnColor="@Color.Success" OffColor="@Color.Secondary"></Switch>
                    </div>
                    <div class="col-6 text-right">
                        <span>固定页脚</span>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-6 d-flex align-items-center">
                        <Switch @bind-Value="@ShowFooter" OnColor="@Color.Success" OffColor="@Color.Primary"></Switch>
                    </div>
                    <div class="col-6 text-right">
                        <span>显示页脚</span>
                    </div>
                </div>
            </GroupBox>

            <GroupBox Title="主题配色">
                <div class="row">
                    <div class="col-2">
                        <span class="color color1" @onclick="@(e => Theme = "color1")"></span>
                    </div>
                    <div class="col-2">
                        <span class="color color2" @onclick="@(e => Theme = "color2")"></span>
                    </div>
                    <div class="col-2">
                        <span class="color color3" @onclick="@(e => Theme = "color3")"></span>
                    </div>
                    <div class="col-2">
                        <span class="color color4" @onclick="@(e => Theme = "color4")"></span>
                    </div>
                    <div class="col-2">
                        <span class="color color5" @onclick="@(e => Theme = "color5")"></span>
                    </div>
                    <div class="col-2">
                        <span class="color color6" @onclick="@(e => Theme = "color6")"></span>
                    </div>
                </div>
            </GroupBox>

            <GroupBox Title="更多设置">
                <div class="row">
                    <div class="col-6 d-flex align-items-center">
                        <Switch @bind-Value="@UseTabSet" OnColor="@Color.Success" OffColor="@Color.Primary"></Switch>
                    </div>
                    <div class="col-6 text-right">
                        <span>@(UseTabSet ? "多标签" : "单页")</span>
                    </div>
                </div>
            </GroupBox>
        </div>
    </Drawer>

    <Toast />
    <Dialog />
    <PopoverConfirm />
    <Message />
    <SweetAlert />
</CascadingValue>
@code
{

    private bool UseTabSet { get; set; } = true;

    private string Theme { get; set; } = "";

    private bool IsOpen { get; set; }

    private bool IsFixedHeader { get; set; } = true;

    private bool IsFixedFooter { get; set; } = true;

    private bool IsFullSide { get; set; } = true;

    private bool ShowFooter { get; set; } = true;

    private List<BootstrapBlazor.Components.MenuItem> Menus { get; set; }

    [CascadingParameter]
    public LoginUserInfo UserInfo
    {
        get;
        set;
    }

    private List<BootstrapBlazor.Components.MenuItem> GetIconSideMenuItems()
    {
        List<BootstrapBlazor.Components.MenuItem> menus = null;
        menus = new List<BootstrapBlazor.Components.MenuItem> { };
        menus.Add(new BootstrapBlazor.Components.MenuItem() { Text = wtmblazor.Localizer["Sys.Home"], Icon = "fa fa-fw fa-home", Url = "/" });
        if (wtmblazor.ConfigInfo.IsQuickDebug == true)
        {
            wtmblazor.GetAllPages().ForEach(x => menus.Add(x));
        }
        else
        {
            var usermenu = UserInfo.Attributes["Menus"] as WalkingTec.Mvvm.Core.Support.Json.SimpleMenuApi[];
            var formatedmenu = new List<FrameworkMenu>();
            foreach (var item in usermenu)
            {
                if (item.ParentId == null)
                {
                    formatedmenu.Add(new FrameworkMenu
                    {
                        ID = new Guid( item.Id),
                        PageName = item.Text,
                        Icon = item.Icon,
                        Url = item.Url,
                        Children = new List<FrameworkMenu>()
                    });
                }
                else
                {
                    var parent = formatedmenu.Where(x => x.ID.ToString() == item.ParentId).FirstOrDefault();
                    parent.Children.Add(new FrameworkMenu
                    {
                        ID = new Guid(item.Id),
                        PageName = item.Text,
                        Icon = item.Icon,
                        Url = item.Url,
                        Children = new List<FrameworkMenu>()
                    });
                }
            }
            GetMenuFromFrameworkMenu(formatedmenu).ForEach(x => menus.Add(x));
        }
        return menus;

    }

    private List<BootstrapBlazor.Components.MenuItem> GetMenuFromFrameworkMenu(List<FrameworkMenu> input)
    {
        List<BootstrapBlazor.Components.MenuItem> rv = new List<BootstrapBlazor.Components.MenuItem>();
        foreach (var item in input)
        {
            var m = new BootstrapBlazor.Components.MenuItem
            {
                Text = wtmblazor.Localizer[item.PageName],
                Icon = item.Icon,
                Url = item.Url
            };
            if(item.Children?.Any() == true)
            {
                GetMenuFromFrameworkMenu(item.Children).ForEach(x=> m.AddItem(x));
            }
            rv.Add(m);
        }
        return rv;
    }
}
